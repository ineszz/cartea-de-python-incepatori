{
  
    
        "post0": {
            "title": "python incepatori",
            "content": ". . Introducere Lectia 1 . &#128104;&#127997;&#8205;&#128187; Ce este programarea? . Exista nenumarate definitii, dar cea care imi place mie este: . Programarea este modalitatea prin care faci calculatoarele sa rezolve probleme . Eu - programatorul:Daca nu exista programatorul, calculatorul este nefolositor. Calculatorul (PC/Laptop/ etc) face ceea ce ii spun eu sa faca. Rezolva probleme: Calculatorul este un instrument. Este un instrument complex, care ne ajuta sa simplicam activitatile. Nu este magie sau mister, ci doar algoritmi care sunt scrisi de programator pentru a rezolva o problema :-) . Exemplificarea comenzilor executate de un calculator . animation source: https://rpf.io/trainonline . Aceste instructiuni sunt combinate intr-un mod logic si sunt fundamentul programarii . Secventa: rularea instructiunilor in ordine | Selectie: faci alegeri | Repetitie : reproducerea unui lucru de mai multe ori, mai mult de o data, asa numita iteratie | . print(&quot;Buna si bine ati venit!&quot;) name = input(&quot;Care este numele tau?&quot;) if name == &quot;ineszz&quot;: print(&quot;Asa ma cheama si pe mine! :-)&quot;) print(&quot;Buna &quot; + name) . &#128013; Ce este Python? . Python este un limbaj de programare orientata obiect, foarte popular in domeniul Tehnologiei. . üêç este: . usor de invatat si utilizat | contine cod gata de folosit ( e.g. biblioteci de coduri pregrogramate, similar blocurilor din Stratch) | util in activitatea de zi cu zi a companiilor mici sau mari, precum Google, NASA, Pixar, Youtube, Facebook, BBC, Raspberry Pi, altele... | . Pagina oficiala a acestui limbaj de programare este: https://www.python.org/ . Cum se foloseste Python? . Pentru a coda in Python, este nevoie de un editor text si un interpretator de Python. Programatorul scrie cod in editor, iar interpretatorul de Python executa codul scris de programator. . De obicei, editorul si interpretatorul sunt disponibile in IDE ( Integrated Development Environment). IDE poate fi disponibil local sau online, caz in care nu trebuie nimic instalat. . DescarcƒÉ Python pe laptopul tƒÉu | instaleaza python local pe laptopul personal de aici | instaleaza un editor, de exemplu mu aici downloadeaza | . Folose»ôte Python online | Acest limbaj poate fi accesat si folosit direct din browser, folosindu-ne de un user si parola, similar Scratch sau Google. | Servicii online prin care se poate accesa python: trinket, kaggle, google colab, etc. | . (Optional): review https://projects.raspberrypi.org/en/projects/python-install-options . Primul meu program Python . Cateva exemple de exersat pentru pornire . print(&quot;Buna&quot;) . print(&quot;Buna&quot;) print(&quot;Sunt un program de calculator&quot;) . &#128073; RETINE &#128105;&#127996;&#8205;&#127979; Elemente exersate . Functii: print si input sunt exemple de functii, programe care de obicei realizeaza o singura actiune; e.g. print - afiseaza text pe ecran | Parametri: informatie atribuita unei functii in paranteze, e.g. &quot;Hi&quot; in print(&quot;Hi&quot;) | Variabila: o bucata de informatie care poate fi reutilizate in program | String: variabila tip text | Integer: variabila tip numar intreg | Operator: = , + | Exercitii . Exercitiul 1: afiseaza pe ecran &quot;Hello Python World&quot; . print(&quot;Hello Python World&quot;) . . Exercitiul 2: afiseaza pe ecran &quot;Hello Ines!&quot; . name = &quot;Ines&quot; print(&quot;Hello&quot;, name, &quot;, &quot;, name, &quot;, the first &quot;, name ) # with a comma print(&quot;Hello&quot;, name + &quot;, &quot; + name + &quot;, the first &quot; + name) # with a + . . Exercitiul 3: afiseaza pe ecran &quot;Hello 2021!&quot; folosind o variabila pentru an. . name = &quot;Ines&quot; print(&quot;Hello&quot;, name, &quot;, &quot;, name, &quot;, the first &quot;, name ) # with a comma print(&quot;Hello&quot;, name + &quot;, &quot; + name + &quot;, the first &quot; + name) # with a + . . Exercitiul 4: afiseaza pe ecran &quot;Imi place sa mananc sushi si pizza.&quot; folosind variabile pentru fiecare mancare preferata. . mancare1 = &quot;sushi&quot; mancare2 = &quot;pizza&quot; print(&quot;Imi place sa mananc {} si {}&quot;.format(mancare1, mancare2) ) # with .format() print(f&quot;Imi place sa mananc {mancare1} si {mancare2}&quot;) # with an f string . . Exercitiul 5: creeaza un bot pe nume CoderBot folosind operatiuni de print, input si output . print(&quot;Hi, I am CoderBot, your personal bot.&quot;) user_name = input (&quot;What is your name?&quot;) print (&quot;Hello &quot; + user_name + &quot;! Welcome&quot;) print (&quot;Nice to meet you&quot;,) . . Exercitiul 6: adauga bot-ului cateva elemente noi. De exemplu sa calculeze 2 numere introduse de utilizator si sa afiseze rezultatul. . input1 = int(input(&quot;Number 1&gt; &quot;)) input2 = int(input(&quot;Number 2&gt; &quot;)) result = input1 + input2 print(result) . . Introducere Lectia 2 . &#128104;&#127997;&#8205;&#128187; Cum iau decizii calculatoarele? . Lectia anterioara, am construit un program din intructiuni cu comenzi input, print si variabile. Instructiunile erau scrise intr-o secventa. . Calculatoarele pot lua si decizii. Cum? . De exemplu, . Ploua afara? Daca ploua [da], iau umbrela si cizmele de cauciuc. | Pot sa mananc dupa cina un desert de ciocolata? Da, daca am terminat de mancat cina | Pot sa sar in siguranta de pe stanca? Da, daca sunt in siguranta. | . Calculatoarele pot lua decizii folosind selectii si ,de obicei, acestea pot fi adevarata sau false. Daca sunt adevarate, se ia o actiune A; daca sunt false , se ia o actiune B diferita. . ‚ÄúEste inaltimea stancii mai mica decat nivelul de la care pot cadea? ‚Äù . Adevarat:Sari! Va fi ok! * Fals: Nu Sari! | . Exemplificarea deciziilor executate de un calculator . . source: https://rpf.io/trainonline . &#129489;&#127995;&#8205;&#128187; Sa exersam deciziile . 1.Operatori de comparatie . 1 == 1 1 == 2 . 1 &gt; 2 1 &lt; 2 . 1 != 2 . Atentie! . = se foloseste pentru atribuirea valorii unei variabile, | == verifica conditia, testeaza veridicitatea ipotezei. | != inseamna diferit si este opusul lui == | . 1==1 . 1==2 . 1 &gt; 2 . 1 &lt; 2 . 1 != 2 . 1 &lt;= 2 . &quot;salut&quot; == &quot;salut&quot; . &quot;salut&quot; == &quot;pa&quot; . &quot;salut&quot; != &quot;pa&quot; . &quot;a&quot; &lt; &quot;b&quot; . &quot;z&quot;&lt;&quot;Z&quot; . &quot;Z&quot; &lt; &quot;z&quot; . &#128073; RETINE (Optional) . Verifica tabelul cu atentie &amp; revino cu intrebari : https://www.asciitable.com/ . 2.Conditiile de tip daca (IF) . conversatie = input(&quot;Hey nu am mai vorbit demult &quot;) if conversatie == &quot;buna&quot;: print(&quot;buna&quot;) print(&quot;pa pa!&quot;) . conversatie = input(&quot;Hey nu am mai vorbit demult &quot;) if conversatie == &quot;buna&quot;: print(&quot;buna&quot;) print(&quot;pa pa!&quot;) . # e.g.: phrase = input (&quot;Ai ajuns la nivelul 4?&quot;) if phrase ==&quot;da&quot;: print(&quot;Mergi mai departe&quot;) print(&quot;Game Over&quot;) . phrase = input(&quot;Buna, cum te simti?&gt;&quot;) if phrase == &quot;bine&quot;: print(&quot;Super! Si eu!&quot;) print(&quot;Pa pa!&quot;) . 3.Conditiile de tip daca _ atunci (IF THEN ELSE) . conversatie = input(&quot;Hey nu am mai vorbit demult &quot;) if conversatie == &quot;buna&quot;: print(&quot;buna&quot;) else: print(&quot;nu inteleg ce zici&quot;) print(&quot;pa pa!&quot;) . conversatie = input(&quot;Hey nu am mai vorbit demult &quot;) if conversatie == &quot;buna&quot;: print(&quot;buna&quot;) else: print(&quot;nu inteleg ce zici&quot;) #print(&quot;pa pa!&quot;) . . # e.g.: number = input(&quot;Introduceti un numar intreg intre 1 si 100 &quot;) num = int(number) if num%2==0: print(&quot;Ai introdus un numar par&quot;) else: print(&quot;Ai introdus un numar impar&quot;) print(&#39;Bravo!&#39;) . 4.Operatorii: &#128095; &#128095;AND, OR &#128095;&#128094; si NOT . x=&quot;a&quot; y=&quot;b&quot; x and y x or y not x . &quot;a&quot; or &quot;b&quot; . 5.Indentarea in scrierea codului Python . Foloseste tasta tab. Aceasta te ajuta sa generezi acelasi numar de spatii necesare in indentare | Ai rabdare cu editorul tau üòÄ: lasa-l sa indenteze codul acolo unde este posibil si foloseste numarul de spatii generate | Mentine-ti codul curat! Daca nu este aliniat potrivit, codul nu va rula | 6.Bucle in Python &#128171;&#128187; . Programele care includ linii repetate de cod pot fi consumatoare de tip si, uneori, greu de inteles. Pentru simplificarea acestor situatii se pot utiliza bucle ( de exemplu, &quot;FOR&quot; sau &quot;WHILE&quot;). . print(1) print(2) print(3) . 1 2 3 . for i in range(10): print(i, end=&#39; &#39;) . 0 1 2 3 4 5 6 7 8 9 . for i in range(1,4): print(i, end=&#39; &#39;) . 1 2 3 . . 2 5 8 . for i in range(10,0,-1): print(i, end=&#39; &#39;) . 10 9 8 7 6 5 4 3 2 1 . colors = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;] print(colors) for color in colors: print(&#39;I love &#39; + color) . [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;] I love red I love green I love blue . num=float(input(&quot;Introduce un numar intre 1 si 10 &quot;)) while num &lt;= 5: print(num) num += 1 . Introduce un numar intre 1 si 10 5 5.0 . Exercitii Lectie . 1. . Introduceti de la tastatura cifra si testati daca este mai mare ca 10. Daca este mai mare ca 10, afisati mesajul &quot;Numarul introdus este mai mare ca 10!&quot; | Introduceti de la tastatura cifra si testati daca este mai mare ca 10. Daca este mai mic ca 10, calculati produsul cu 10 si afisati mesajul personalizat &quot;Numarul introdus genereaza produsul urmatoru []!&quot; | . 2. . Construieste un program care sa citeasca de la tastatura varsta utilizatorului | In functie de varsta introdusa, ii vei afisa pe ecran un mesaj specific: 0-9 ani copil, 9-18 - adolescent, 18-65 adult, peste 65 varsta de aur | . 3. . Construieste un program de asistenta de tip chatbot care sa evalueze daca utilizatorul cere ajutor | Daca utilizatorul cere ajutor, i se va afisa pe ecran &quot;Cum te pot ajuta?&quot; | Altfel daca nu se identifica corect, i se va afisa &quot;Sunt un asistent online de urgenta, nu inteleg ce spui. Te rog incearca din nou&quot; | . # varsta.py varsta = int(input(&quot;Introduceti varsta dvs.: &quot;)) if varsta &gt;= 0 and varsta &lt;= 9: print(&quot;Esti un copil!&quot;) elif varsta &gt; 9 and varsta &lt;= 18: print(&quot;Esti inca adolescent!&quot;) elif varsta &gt; 18 and varsta &lt;= 65: print(&quot;Este un adult!&quot;) elif varsta &gt; 65: print(&quot;Varsta de aur!&quot;) . . # chatbot.py print(&quot;Bine ai venit&quot;) numele_meu = &quot;Ines&quot; print(&quot;Eu sunt &quot; + numele_meu + &quot;, asistentul tau personal&quot;) propozitie = input(&quot;Pot sa te ajut cu ceva &gt;&quot;) if propozitie == &quot;ajuta-ma&quot;: #if (propozitie == &quot;ajuta-ma&quot; or propozitie == &quot;ajutama&quot;): print(&quot;Cum te pot ajuta?&quot;) else: print(&quot;Sunt un asistent online de urgenta, nu inteleg ce spui. Te rog incearca din nou&quot;) print(&quot;Nota: acesta este un serviciu care inregistreaza toate interactiunile dvs.&quot;) . . &#128073; RETINE &#128105;&#127996;&#8205;&#127979; Elemente exersate . Functii: IF, IF THEN ELSE | Operatori AND , OR, NOT | Indentare &amp; tab | Feedback Atelier 2: click here . Introducere Lectia 3 . &#128104;&#127997;&#8205;&#128187; Variabile si Functii . Lectia anterioara, am exersat deciziile cu operatori de comparatie precum =, &gt;, &lt; sau AND , OR, NOT. Am folosit functiile If, If then else si am facut iteratii folosind for &amp; While. . Functia este un fragment de cod care indeplineste o anumita sarcina. Adica aduna tot codul intr-un pachet, i se atribuie un nume si poate fi oricand apelata ulterior. Functia ne ajuta sa simplicam codul unui program prin evitarea repetarii scrierii acelorasi linii de cod. . definirea functiei . def salutari(): print(&quot;Salutari!&quot;) . | apelarea functiei . salutari() . | . def salutari(): print(&quot;Salutari!&quot;) salutari() . Salutari! . salutari() . Salutari! . &#129489;&#127995;&#8205;&#128187; Sa exersam functiile . 1.Recuperare datelor din functii . def num_input(nbr): typed=input(nbr) num=int(typed) return num a=num_input(&#39;Introduceti primul numar:&#39;) b=num_input(&#39;Introduceti al doilea numar:&#39;) print(&#39;a+b= &#39;, a+b) . # valori default pentru parametri def make_pizza(topping=&#39;bacon&#39;): &quot;&quot;&quot;Serviti o pizza cu un singur topping.&quot;&quot;&quot; print(&quot;Serviti o pizza cu &quot; + topping + &quot; !&quot;) make_pizza() make_pizza(&#39;pepperroni&#39;) . def num_input(nbr): typed=input(nbr) num=int(typed) return num . a=num_input(&#39;Introduceti primul numar:&#39;) b=num_input(&#39;Introduceti al doilea numar:&#39;) print(&#39;a+b= &#39;, a+b) . Introduceti primul numar:4 Introduceti al doilea numar:14 a+b= 18 . def suma_2nr(x,y): &quot;&quot;&quot;Introduceti 2 numere si returneaza suma lor&quot;&quot;&quot; return x + y sum = suma_2nr(30,4) print(sum) . 7 . print(suma_2nr(30,4)) . 34 . ?suma_2nr . def num_input(nbr): typed=input(nbr) num=int(typed) return num a=num_input(&#39;Introduceti primul numar:&#39;) b=num_input(&#39;Introduceti al doilea numar:&#39;) print(&#39;a+b= &#39;, a+b) . 2.Transferul de date din functii . def inaltimea(m,cm): total=(100*m)+cm print(total,&#39;cm inaltime&#39;) . def inaltimea(m,cm): total=(100*m)+cm print(total,&#39;cm inaltime&#39;) . inaltimea(1,72) . 172 cm inaltime . 3.Schimbarea valorilor din interiorul unei variabile . def func3(x): print(x) x=&quot;schimbare&quot; print(x) y=&quot;original&quot; func3(y) . def func3(x): print(x) x=&quot;schimbare&quot; print(x) y=&quot;initial&quot; print(y) func3(y) . initial initial schimbare . 4.Mascarea unei variabile globale . x=7777 def func4(x): x=5555 print(x) func4() . x=1721 def func4(x): x=5555 print(x) print(x) func4(x) . 1721 5555 . &#128073; Let&#39;s play! . Xmas_edition_atelier3_1 . &#128073; RETINE (Optional) . Exercitii Lectie . Xmas Theme 1. . Construieste o functie care afiseaza utilizatorului optiunea de a alege una din operatiunile Adunare, Inmultire | Apoi in functie de alegerea lui, invita sa introduca 2 numere de la tastatura, efectueza operatiunea ceruta pentru a afisa rezultatul final. | . 2. . Construieste un program care sa invite utilizatorul sa ghiceasca numarul random ales de calculator. | . 3. . Xmas vibes program | . Raspuns 1 . def add(x, y): result = x + y return result def mult(x, y): result = x * y return result print(&quot;1. Adunare&quot;) print(&quot;2. Inmultire&quot;) action = input(&quot;Alege un numar: &quot;) a = input(&quot;Primul numar: &quot;) a = float(a) b = input(&quot;Al doilea numar: &quot;) b = float(b) if action == &quot;1&quot;: result = add(a,b) elif action == &quot;2&quot;: result = mult(a,b) else: result = &quot;Error&quot; print( &quot;Raspuns: %s&quot; % result) . . 1. Adunare 2. Inmultire Alege un numar: 1 Primul numar: 10 Al doilea numar: 20 Raspuns: 30.0 . Raspuns 2 . from random import randint max_nbr = 100 secret_nbr = randint(1, max_nbr) incercari = 0 print(&quot;Ghiceste numarul de la 1 la %s&quot; % max_nbr) for i in range(100): incercari = incercari + 1 incercare = input(&quot;Ghiceste: &quot;) if int(incercare) == secret_nbr : print( &quot;Corect! Numarul de incarcari necesar: %s&quot; % incercari) break elif int(incercare) &gt; secret_nbr : print(&quot;Prea mare&quot;) else: print(&quot;Prea mic&quot;) . . Ghiceste numarul de la 1 la 100 Ghiceste: 3 Prea mic Ghiceste: 70 Prea mic Ghiceste: 80 Prea mic Ghiceste: 90 Corect! Numarul de incarcari necesar: 4 . Raspuns Xmas: . tree_height = input(&quot;Introduceti dimensiunea bradutului de Craciun : &quot;) tree_height = int(tree_height) spaces = tree_height-1 hashes = 1 stump_spaces = tree_height-1 while tree_height != 0 : for i in range(spaces): print(&#39; &#39;, end=&quot;&quot;) for i in range(hashes): print(&#39;#&#39;, end=&quot;&quot;) print() tree_height -= 1 spaces -= 1 hashes += 2 for i in range(stump_spaces): print(&#39; &#39;, end=&quot;&quot;) print(&#39;#&#39;,end=&quot;&quot;) . . Introduceti dimensiunea bradutului de Craciun : 10 # ### ##### ####### ######### ########### ############# ############### ################# ################### # . &#128073; RETINE &#128105;&#127996;&#8205;&#127979; Elemente exersate . Functii | Introducere Lectia 4 . &#128104;&#127997;&#8205;&#128187; Libraria pygame . Lectia anterioara, am finalizate elementele de baza pentru a putea construi mini proiecte . pygame este o librarie ce include fragmente de cod care indeplinesc o anumita sarcina. Adica aduna tot codul intr-un pachet, i se atribuie un nume si poate fi oricand apelata ulterior. Functia ne ajuta sa simplicam codul unui program prin evitarea repetarii scrierii acelorasi linii de cod. . Instalarea librariei . python3 -m pip install -U pygame --user . Pentru a verifica instalarea, se poate rula un program inclus in librarie. . python3 -m pygame.examples.aliens . Pentru mai multe detalii, se poate consulta direct pagina librariei de aici : link . GUI - sau graphical user interface . activarea librariei ( local, in Google Colab nu functioneaza deoarece are nevoie de activarea anumitor functii disponibile local) . import pygame . Elemente utile . pygame.init() | pygame.draw() | pygame.event.get() | pygame.quit() | . Setarea unui proiect pygame: . crearea unui screen (ecran) | initializarea variabilelor de necesare | bucla jocului, care include evenimentele, desenarea graficii si actualizarea afisajului. | . Logica bucla proiect joc pygame . running = True while running: # Process input (events) # Update # Render (draw) . Folosirea si definirea culorilor . Color Name Color RGB tuple . white = | ((255,255,255)) | . blue = | ((0,0,255)) | . green = | ((0,255,0)) | . red = | ((255,0,0)) | . black = | ((0,0,0)) | . orange = | ((255,100,10)) | . yellow = | ((255,255,0)) | . blue_green = | ((0,255,170)) | . marroon = | ((115,0,0)) | . lime = | ((180,255,100)) | . pink = | ((255,100,180)) | . purple = | ((240,0,255)) | . gray = | ((127,127,127)) | . magenta = | ((255,0,230)) | . brown = | ((100,40,0)) | . forest_green = | ((0,50,0)) | . navy_blue = | ((0,0,100)) | . rust = | ((210,150,75)) | . dandilion_yellow = | ((255,200,0)) | . highlighter = | ((255,255,100)) | . sky_blue = | ((0,255,255)) | . light_gray = | ((200,200,200)) | . dark_gray = | ((50,50,50)) | . tan = | ((230,220,170)) | . coffee_brown = | ((200,190,140)) | . &#129489;&#127995;&#8205;&#128187; Sa exersam . Exercitii Lectie . De construit local un fundal de joc: . ecran cu titlu (set_caption) | folosirea culorilor | folosirea imaginilor ( blit) | folosirea formelor (draw) | . &#128073; Let&#39;s play on wordwall! . Pygame_init-01 . &#128073; RETINE &#128105;&#127996;&#8205;&#127979; Elemente exersate . pygame.org | pygame.init() - initializeaza fereastra jocului | pygame.quit() - inchide fereestra jocului | Feedback Atelier 4: click here . &#128211; Glosar . -- . Secventa:descrie rularea unui cod linie cu line la un moment dat * Functie: cod specific care intoarce un rezultat specific ( e.g. print, input) | Parametru: informatie care este atribuita unei functii | Cod: instructiunile dintr-un program | Variabila: informatie memorata in program catre care se face referinta prin nume ( e.g. nume=&quot;Ana&quot; print(nume) - variabila=nume) | Formatul informatiei: defineste tipul informatiei memorate intr-o variabila ( string( adica text), integer, float ( adica numare) | String: informatie de tip text .e.g. &quot;Ana&quot; | Integer: informatie de tip numere. e.g. 17 | Float: informatie de tip numere. e.g. 17 | Bug: o problema a programului in a genera comporamentul asteptat | Debugging: procesul identificarii si rezolvarii bug-urilor | IDE: integrated development environment, interfata prin care scriem codul. e.g. Mu, PyCharm, VS Code, etc | Concatenare: aducerea mai multor bucati de text impreuna | Sintaxa: structura sau layout corect al codului | Operatori: pentru comparatie ==(egal), !=(diferit), &lt;(mai putin decat), &gt;(mai mare decat), &lt;= (mai putin sau egal cu), &gt;= (mai mare sau egal cu) | Secventa: descrie rularea unui cod linie cu line la un moment dat | Functie: cod specific care intoarce un rezultat specific ( e.g. print, input) | Parametru: informatie care este atribuita unei functii | Cod: instructiunile dintr-un program | Variabila: informatie memorata in program catre care se face referinta prin nume ( e.g. nume=&quot;Ana&quot; print(nume) - variabila=nume) | Formatul informatiei: defineste tipul informatiei memorate intr-o variabila ( string( adica text), integer, float ( adica numare) | String: informatie de tip text .e.g. &quot;Ana&quot; | Integer: informatie de tip numere. e.g. 17 | Float: informatie de tip numere intregi. e.g. 17 | Bug: o problema a programului in a genera comporamentul asteptat | Debugging: procesul identificarii si rezolvarii bug-urilor | IDE: integrated development environment, interfata prin care scriem codul. e.g. Mu, PyCharm, VS Code, etc | Concatenare: aducerea mai multor bucati de text impreuna | Sintaxa: structura sau layout corect al codului | Operatori: pentru comparatie ==(egal), !=(diferit), &lt;(mai putin decat), &gt;(mai mare decat), &lt;= (mai putin sau egal cu), &gt;= (mai mare sau egal cu) | Global cuvant-cheie care iti permite sa modifici o variabila globala folosindu-te de functii | Apelarea unei functii solicitarea adresata calculatorului de a rula o anumita functie | Comentariu informatii suplimentare pentru oricine citeste codul . In python, este semnalizat cu un &#39;#&#39; la inceputul randului | def cuvand-cheie folosit in python pentru crearea propriilor functii pygame.org | .",
            "url": "https://ineszz.github.io/cartea-de-python-incepatori/python/2021/12/01/python-incepatori.html",
            "relUrl": "/python/2021/12/01/python-incepatori.html",
            "date": " ‚Ä¢ Dec 1, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats.¬†&#8617; . |",
          "url": "https://ineszz.github.io/cartea-de-python-incepatori/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://ineszz.github.io/cartea-de-python-incepatori/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}